{"version":3,"sources":["../src/index.ts","../src/routers/rom_router.ts","../node_modules/.pnpm/kolorist@1.8.0/node_modules/kolorist/src/index.ts","../src/utils/logger.ts","../src/utils/response.ts","../src/server.config.ts","../src/utils/query.ts","../src/services/roms_service.ts","../src/sequelize/models/categorys_model.ts","../src/sequelize/index.ts","../src/sequelize/models/roms_model.ts","../src/routers/categorys_router.ts","../src/services/categorys_service.ts","../src/routers/banner_router.ts","../src/sequelize/models/banner_model.ts","../src/services/banner_service.ts"],"sourcesContent":["import type { Request, Response, RequestHandler, NextFunction } from 'express'\nimport express from 'express'\nimport roms from './routers/rom_router'\nimport categorys from './routers/categorys_router'\nimport { port, getRomPath, hostIp, baseURL } from './server.config'\nimport * as logger from './utils/logger'\nimport banner from './routers/banner_router'\n\nconst setHeaders: RequestHandler = function (\n    req: Request,\n    res: Response,\n    next: NextFunction\n) {\n    res.setHeader('Access-Control-Allow-Origin', '*') // 允许跨域\n    res.setHeader('Access-Control-Allow-Headers', '*') // 允许客户端设置请求头\n    res.setHeader('Access-Control-Allow-Methods', '*') // 允许客户端的请求方式\n    if (req.method === 'OPTIONS') {return res.sendStatus(200)} // options请求快速结束\n    next()\n}\nconst app = express()\n\napp.use(express.json())\n    // 请求头\n    .use(setHeaders)\n    // 静态资源\n    .use('/roms', express.static(getRomPath()))\n    // 路由\n    .use(categorys)\n    .use(roms)\n    .use(banner)\n\n// 开发模式下配置本地ip域名\nif (process.env.NODE_ENV === 'development') {\n    app.set('host', hostIp)\n}\n\napp.listen(port, () => {\n    logger.info(`server: ${baseURL}`)\n})\n","import { Router as router } from 'express'\nimport { dispatchResponse, sendEmpty } from '../utils/response'\n\nimport { checkQuery, resolveURL } from '../utils/query'\nimport { imgDir } from '../server.config'\nimport { getRandomList, getRomById, getRomlist, getSuggestions } from '../services/roms_service'\n\nconst roms = router()\n\n// 获取游戏ROM列表\n// /romlist?cat=xxx&keyword=xxx&page=xxx&limit=xxx\nroms.get('/romlist', async (req, res) => {\n    let { cat, keyword, page, limit } = req.query as Record<string, string>\n    cat ??= ''\n    keyword ??= ''\n    page ??= '1'\n    limit ??= '20'\n    await dispatchResponse(async () => {\n        const list = await getRomlist(cat, keyword, +page, +limit)\n        res.send({\n            code: 200, result: list.result, count: list.count,\n        })\n    }, res)\n})\n\n// 随机获取N个游戏\n// /random?n=xxx&cat=xxx&ignore=xxx\nroms.get('/random', async (req, res) => {\n    let { n, cat, ignore } = req.query as Record<string, string>\n    n ??= '8'\n    await dispatchResponse(async () => {\n        const result = await getRandomList(n, cat, ignore)\n        res.send({ code: 200, result })\n    }, res)\n})\n\n// 根据id获取单个ROM信息\n// /rom?id=xxx\nroms.get('/rom', async (req, res) => {\n    const id = req.query.id as string\n    if (!checkQuery(id)) {\n        sendEmpty(res, 'id')\n        return\n    }\n    await dispatchResponse(async () => {\n        const rom = await getRomById(id)\n        if (rom) {\n            res.send({\n                code: 200,\n                rom,\n            })\n        }\n        else {\n            res.send({ code: 400 })\n        }\n    }, res)\n})\n\n// 搜索建议\n// /suggestions?keyword=xxx\nroms.get('/suggestions', async (req, res) => {\n    const keyword = req.query.keyword as string\n    if (checkQuery(keyword)) {\n        await dispatchResponse(async () => {\n            const result = await getSuggestions(keyword)\n            if (result.length > 0) {\n                const suggestions = result.map(game => {\n                    return {\n                        id: game.id,\n                        value: game.title,\n                        cover: resolveURL(imgDir + game.cover),\n                    }\n                })\n                res.send({\n                    code: 200,\n                    suggestions,\n                })\n            }\n            else {\n                res.send({ code: 0 })\n            }\n        }, res)\n    }\n    else {\n        sendEmpty(res, 'keyword')\n        return\n    }\n})\n\n// 根据id删除ROM\n// /delete?id=xxx\nroms.delete('/delete', async (req, res) => {\n    const id = req.query.id as string\n    if (!checkQuery(id)) {\n        sendEmpty(res, 'id')\n        return\n    }\n    await dispatchResponse(async () => {\n        const rom = await getRomById(id)\n        if (rom) {\n            rom.destroy()\n            res.send({ code: 200 })\n        }\n        else {\n            res.send({ code: 400 })\n        }\n    }, res)\n})\n\nexport default roms\n",null,"import { red, yellow, green } from 'kolorist'\n\nconst info = function (str: string) {\n    console.log(green(str))\n}\n\nconst warn = function (str: string) {\n    console.log(yellow(str))\n}\n\nconst error = function (str: string) {\n    console.log(red(str))\n    process.exit(0)\n}\n\nconst nestLine = function () {\n    console.log()\n}\n\nexport {\n    info,\n    warn,\n    error,\n    nestLine,\n}\n","import type { Response } from 'express'\nimport * as logger from './logger'\nimport os from 'os'\n\nfunction sendEmpty(res: Response, target: string) {\n    res.send({\n        code: 400,\n        message: `${target}内容不能为空`,\n    })\n}\n\nasync function dispatchResponse(\n    target: Function,\n    res: Response,\n    message?: string,\n    err?: (args: any) => any\n) {\n    message = message ?? '发生错误'\n    try {\n        await target()\n    }\n    catch (e) {\n        logger.error(`${e}`)\n        if (err) {\n            err(e)\n        }\n        res.send({\n            code: 500,\n            msg: message,\n        })\n    }\n}\n\nfunction getIpAddress() {\n    const ifaces = os.networkInterfaces()\n    for (const dev in ifaces) {\n        const iface = ifaces[dev]!\n\n        for (let i = 0; i < iface.length; i++) {\n            const { family, address, internal } = iface[i]\n\n            if (family === 'IPv4' && address !== '127.0.0.1' && !internal) {\n                return address\n            }\n        }\n    }\n    return '127.0.0.1'\n}\n\nexport { sendEmpty, dispatchResponse, getIpAddress }\n","import { join } from 'path'\nimport { getIpAddress } from './utils/response'\n\nconst dbPath = '../db/nes.sqlite3'\nconst romPath = '../roms'\nconst romDir = '/roms/'\nconst imgDir = '/roms/img/'\nconst hostIp = getIpAddress()\nconst getDataBasePath = () => join(__dirname, dbPath)\nconst getRomPath = () => join(__dirname, romPath)\n\nconst port = 8848\nlet baseURL = `http://localhost:${port}`\n\n// 开发模式下配置主机为局域网ip，方便调试移动端\nif (process.env.NODE_ENV === 'development') {\n    baseURL = `http://${hostIp}:${port}`\n}\n\nexport {\n    romDir,\n    imgDir,\n    getDataBasePath,\n    getRomPath,\n    port,\n    baseURL,\n    hostIp,\n}\n","import type { RomsInstance } from '../sequelize/models/roms_model'\nimport { baseURL, romDir, imgDir } from '../server.config'\n\nfunction checkQuery<T>(query: T): query is T & {} {\n    if (typeof query === 'string') {\n        return query.trim() !== ''\n    }\n    return query !== void 0 && query !== null\n}\n\nfunction resolveURL(str: string) {\n    return baseURL + str\n}\n\nfunction resolveRomData<R extends RomsInstance>(rom: R) {\n    return {\n        id: rom.id,\n        category: rom.Category.dataValues.type,\n        url: resolveURL(romDir + rom.url),\n        cover: resolveURL(imgDir + rom.cover),\n        image: resolveURL(imgDir + rom.image),\n        title: rom.title,\n        language: rom.language,\n        type: rom.type,\n        source: rom.source,\n        comment: rom.comment,\n        location: rom.location,\n        size: rom.size,\n        publisher: rom.publisher,\n    }\n}\n\nexport { checkQuery, resolveURL, resolveRomData }\n","import { Op, fn } from 'sequelize'\nimport { categorys_model } from '../sequelize/models/categorys_model'\nimport { roms_model } from '../sequelize/models/roms_model'\nimport { checkQuery, resolveRomData, resolveURL } from '../utils/query'\nimport { imgDir, romDir } from '../server.config'\n\nasync function getRomlist(cat: string, keyword: string, page: number, limit: number) {\n    const where: Record<string, any> = {}\n    if (checkQuery(keyword)) {\n        where.title = {\n            [Op.like]: `%${keyword}%`,\n        }\n    }\n    if (checkQuery(cat)) {\n        where.type = cat\n    }\n    const result = await roms_model.findAndCountAll({\n        attributes: ['id', 'title', 'cover', 'image', 'language', 'type', 'source', 'comment', 'location', 'size', 'publisher', 'url'],\n        include: {\n            model: categorys_model,\n            attributes: [['name', 'type']],\n        },\n        offset: (+page - 1) * +limit,\n        limit: +limit,\n        where,\n    })\n    return {\n        result: result.rows.map(rom => {\n            return resolveRomData(rom)\n        }),\n        count: result.count,\n    }\n}\n\nasync function getRomById(id: string | number) {\n    const romInfo = await roms_model.findByPk(id)\n    if (romInfo) {\n        romInfo.url = resolveURL(romDir + romInfo.url)\n        romInfo.image = resolveURL(imgDir + romInfo.image)\n        romInfo.cover = resolveURL(imgDir + romInfo.cover)\n    }\n    return romInfo\n}\n\nasync function getRandomList(n: string | number, cat: string, ignore: string) {\n    const where: Record<string, any> = {}\n    if (checkQuery(cat)) {\n        where.type = cat\n    }\n    if (checkQuery(ignore)) {\n        where.id = { [Op.ne]: ignore }\n    }\n    const result = await roms_model.findAll({\n        attributes: ['id', 'title', 'cover', 'image', 'language', 'type', 'source', 'comment', 'location', 'size', 'publisher', 'url'],\n        include: {\n            model: categorys_model,\n            attributes: [['name', 'type']],\n        },\n        order: [[fn('RANDOM'), 'ASC']],\n        offset: 1,\n        limit: +n,\n        where,\n    })\n    return result.map(rom => {\n        return resolveRomData(rom)\n    })\n}\n\nasync function getSuggestions(keyword: string) {\n    const result = await roms_model.findAll({\n        attributes: ['id', 'title', 'cover'],\n        where: {\n            title: {\n                [Op.like]: `%${keyword}%`,\n            },\n        },\n    })\n    return result\n}\n\nexport { getRomlist, getRomById, getRandomList, getSuggestions }\n","import { DataTypes, Model } from 'sequelize'\nimport sequelize from '..'\n\nclass Categorys extends Model {\n    declare id: number\n    declare name: string\n}\n\nconst categorys_model = Categorys.init({\n    id: {\n        type: DataTypes.TEXT,\n        allowNull: false,\n        primaryKey: true,\n    },\n    name: {\n        type: DataTypes.TEXT,\n        allowNull: false,\n    },\n}, {\n    sequelize,\n    tableName: 'categorys',\n    freezeTableName: true,\n    createdAt: false,\n    updatedAt: false,\n})\n\ncategorys_model.sync()\n\ntype CategorysInstance = InstanceType<typeof Categorys>\n\nexport { categorys_model, type CategorysInstance }\n","import { Sequelize } from 'sequelize'\nimport { getDataBasePath } from '../server.config'\n\nconst sequelize = new Sequelize({\n    dialect: 'sqlite',\n    storage: getDataBasePath(),\n    logging() {\n        return\n    },\n})\n\nexport default sequelize\n","import { DataTypes, Model } from 'sequelize'\nimport sequelize from '..'\nimport { categorys_model } from './categorys_model'\n\nfunction textField() {\n    return {\n        type: DataTypes.TEXT,\n        allowNull: false,\n    }\n}\n\nclass Roms extends Model {\n    declare id: number\n    declare title: string\n    declare cover: string\n    declare image: string\n    declare language: string\n    declare type: string\n    declare source: string\n    declare comment: string\n    declare location: string\n    declare size: string\n    declare publisher: string\n    declare url: string\n    // categorys表\n    declare Category: {\n        dataValues: {\n            type: string\n        }\n    }\n}\n\nconst roms_model = Roms.init({\n    id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n    },\n    title: textField(),\n    cover: textField(),\n    image: textField(),\n    language: textField(),\n    type: textField(),\n    source: textField(),\n    comment: textField(),\n    location: textField(),\n    size: textField(),\n    publisher: textField(),\n    url: textField(),\n},\n{\n    sequelize,\n    modelName: 'roms',\n    freezeTableName: true,\n    createdAt: false,\n    updatedAt: false,\n})\n\nroms_model.belongsTo(categorys_model, { foreignKey: 'type', targetKey: 'id' })\nroms_model.sync()\n\ntype RomsInstance = InstanceType<typeof Roms>\n\nexport { roms_model, type RomsInstance }\n","import { Router as router } from 'express'\nimport { getAllCategorys } from '../services/categorys_service'\nimport { dispatchResponse } from '../utils/response'\n\nconst categorys = router()\n\ncategorys.get('/categorys', async (_, res) => {\n    await dispatchResponse(async () => {\n        const reslult = await getAllCategorys()\n        res.send({\n            code: 200,\n            categorys: reslult,\n        })\n    }, res)\n})\n\nexport default categorys\n","import { categorys_model } from '../sequelize/models/categorys_model'\n\nasync function getAllCategorys() {\n    const result = await categorys_model.findAll()\n    return result\n}\n\nexport { getAllCategorys }\n","import { Router as rotuer } from 'express'\nimport { getBanner } from '../services/banner_service'\nimport { dispatchResponse } from '../utils/response'\n\nconst banner = rotuer()\n\nbanner.get('/banner', async (_, res) => {\n    await dispatchResponse(async () => {\n        const banner = await getBanner()\n        res.send({\n            code: 200,\n            banner,\n        })\n    }, res)\n})\n\nexport default banner\n","import { DataTypes, Model } from 'sequelize'\nimport sequelize from '..'\nimport { roms_model } from './roms_model'\n\nclass Banner extends Model {\n    declare id: number\n    declare title: string\n    // roms表\n    declare rom: {\n        image: string\n    }\n}\n\nconst banner_model = Banner.init({\n    id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n    },\n    title: {\n        type: DataTypes.TEXT,\n        allowNull: false,\n    },\n}, {\n    sequelize,\n    tableName: 'banner',\n    freezeTableName: true,\n    createdAt: false,\n    updatedAt: false,\n})\n\nbanner_model.belongsTo(roms_model, { foreignKey: 'id', targetKey: 'id' })\n\nbanner_model.sync()\n\ntype BannerInstance = InstanceType<typeof Banner>\n\nexport { banner_model, type BannerInstance }\n","import { roms_model } from '../sequelize/models/roms_model'\nimport { banner_model } from '../sequelize/models/banner_model'\nimport { resolveURL } from '../utils/query'\nimport { imgDir } from '../server.config'\n\nasync function getBanner() {\n    const result = await banner_model.findAll({\n        attributes: ['id', 'title'],\n        include: {\n            model: roms_model,\n            attributes: ['image'],\n        },\n    })\n    return result.map(({ rom, title, id }) => {\n        return {\n            id,\n            image: resolveURL(imgDir + rom.image),\n            title: title,\n        }\n    })\n}\n\nexport { getBanner }\n"],"mappings":"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","names":["import_express","os","import_sequelize","import_sequelize","import_sequelize","router","import_express","router","import_express","import_sequelize","rotuer","banner","express"]}