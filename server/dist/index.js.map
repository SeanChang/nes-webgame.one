{"version":3,"sources":["../src/index.ts","../src/routers/rom.ts","../src/sqlite3/sql.ts","../src/sqlite3/index.ts","../src/server.config.ts","../src/utils/query.ts","../node_modules/.pnpm/kolorist@1.8.0/node_modules/kolorist/src/index.ts","../src/utils/logger.ts","../src/utils/response.ts"],"sourcesContent":["import type { Request, Response, RequestHandler, NextFunction } from 'express'\r\nimport express from 'express'\r\nimport roms from './routers/rom'\r\nimport { port, getRomPath, hostIp, baseURL } from './server.config'\r\nimport logger from './utils/logger'\r\n\r\nconst setHeaders: RequestHandler = function (\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction\r\n) {\r\n    res.setHeader('Access-Control-Allow-Origin', '*') // 允许跨域\r\n    res.setHeader('Access-Control-Allow-Headers', '*') // 允许客户端设置请求头\r\n    res.setHeader('Access-Control-Allow-Methods', '*') // 允许客户端的请求方式\r\n    if (req.method === 'OPTIONS') {return res.sendStatus(200)} // options请求快速结束\r\n    next()\r\n}\r\nconst app = express()\r\n\r\napp.use(express.json())\r\napp.use(setHeaders)\r\napp.use('/roms', express.static(getRomPath()))\r\napp.use(roms)\r\n\r\n// 开发模式下配置本地ip域名\r\nif (process.env.NODE_ENV === 'development') {\r\n    app.set('host', hostIp)\r\n}\r\n\r\napp.listen(port, () => {\r\n    logger.info(`server: ${baseURL}`)\r\n})\r\n","import { Router as router } from 'express'\r\nimport { setSelectSql } from '../sqlite3/sql'\r\nimport db, { dispatchResponse } from '../sqlite3'\r\nimport { sendEmpty } from '../utils/response'\r\nimport { checkQuery, resolveURL, resolveRomData } from '../utils/query'\r\nimport { imgDir } from '../server.config'\r\n\r\nconst roms = router()\r\n\r\n// 获取游戏分类\r\nroms.get('/categorys', async (_, res) => {\r\n    await dispatchResponse(async () => {\r\n        const categorys = await db.allAsync(setSelectSql({\r\n            select: ['id', 'name'],\r\n            from: 'categorys',\r\n        }))\r\n        res.send({\r\n            code: 200,\r\n            categorys,\r\n        })\r\n    }, res)\r\n})\r\n\r\nconst selectList = ['roms.id', 'title', 'cover', 'image', 'language', 'type', 'source', 'comment', 'location', 'categorys.name as category', 'size', 'publisher', 'url']\r\nconst selectFrom = 'roms join categorys on roms.type=categorys.id'\r\n\r\n// 获取游戏ROM列表\r\n// /romlist?cat=xxx&keyword=xxx&page=xxx&limit=xxx\r\nroms.get('/romlist', async (req, res) => {\r\n    let { cat, keyword, page, limit } = req.query as Record<string, string>\r\n    cat ??= ''\r\n    keyword ??= ''\r\n    page ??= '1'\r\n    limit ??= '20'\r\n    const sqlOptions: SelectSqlOption = {\r\n        select: 'count(*) as count',\r\n        from: selectFrom,\r\n        where: [],\r\n    }\r\n    if (checkQuery(keyword)) {\r\n        sqlOptions.where?.push(`(\\`title\\` like '%${decodeURI(keyword)}%')`)\r\n    }\r\n    if (checkQuery(cat)) {\r\n        sqlOptions.where?.push(`type='${cat}'`)\r\n    }\r\n    await dispatchResponse(async () => {\r\n        const rows = await db.allAsync(setSelectSql(sqlOptions))\r\n        sqlOptions.select = selectList\r\n        sqlOptions.limit = {\r\n            page,\r\n            count: limit,\r\n        }\r\n        const result: RomInfo[] = await db.allAsync(setSelectSql(sqlOptions))\r\n        result.forEach(rom => {\r\n            resolveRomData(rom)\r\n        })\r\n        res.send({\r\n            code: 200, result, count: rows[0].count,\r\n        })\r\n    }, res)\r\n})\r\n\r\n// 随机获取N个游戏\r\n// /random?n=xxx&cat=xxx&ignore=xxx\r\nroms.get('/random', async (req, res) => {\r\n    let { n, cat, ignore } = req.query as Record<string, string>\r\n    n ??= '8'\r\n    const sqlOptions: SelectSqlOption = {\r\n        select: selectList,\r\n        from: selectFrom,\r\n        order: {\r\n            by: 'RANDOM()',\r\n            sort: 'asc',\r\n        },\r\n        limit: {\r\n            page: 1,\r\n            count: n,\r\n        },\r\n        where: [],\r\n    }\r\n    if (checkQuery(cat)) {\r\n        sqlOptions.where?.push(`type='${cat}'`)\r\n    }\r\n    if (checkQuery(ignore)) {\r\n        sqlOptions.where?.push(`roms.id<>${ignore}`)\r\n    }\r\n    await dispatchResponse(async () => {\r\n        const result = await db.allAsync(setSelectSql(sqlOptions))\r\n        result.forEach(rom => {\r\n            resolveRomData(rom)\r\n        })\r\n        res.send({ code: 200, result })\r\n    }, res)\r\n})\r\n\r\n// 根据id获取单个ROM信息\r\n// /rom?id=xxx\r\nroms.get('/rom', async (req, res) => {\r\n    const id = req.query.id as string\r\n    if (!checkQuery(id)) {\r\n        sendEmpty(res, 'id')\r\n        return\r\n    }\r\n    const sql: SelectSqlOption = {\r\n        select: selectList,\r\n        from: selectFrom,\r\n        where: [`roms.id='${id}'`],\r\n    }\r\n    await dispatchResponse(async () => {\r\n        const roms = await db.allAsync(setSelectSql(sql))\r\n        if (roms.length === 1) {\r\n            resolveRomData(roms[0])\r\n            res.send({\r\n                code: 200,\r\n                rom: roms[0],\r\n            })\r\n        }\r\n        else {\r\n            res.send({ code: 400 })\r\n        }\r\n    }, res)\r\n})\r\n\r\n// 搜索建议\r\n// /suggestions?keyword=xxx\r\nroms.get('/suggestions', async (req, res) => {\r\n    const keyword = req.query.keyword as string\r\n    const sql: SelectSqlOption = {\r\n        select: ['id', 'title', 'cover'],\r\n        from: 'roms',\r\n    }\r\n    if (checkQuery(keyword)) {\r\n        sql.where = [`(\\`title\\` like '%${decodeURI(keyword)}%')`]\r\n    }\r\n    else {\r\n        sendEmpty(res, 'keyword')\r\n        return\r\n    }\r\n    await dispatchResponse(async () => {\r\n        const result = await db.allAsync(setSelectSql(sql))\r\n        if (result.length > 0) {\r\n            const suggestions = result.map(game => {\r\n                return {\r\n                    id: game.id,\r\n                    value: game.title,\r\n                    cover: resolveURL(imgDir + game.cover),\r\n                }\r\n            })\r\n            res.send({\r\n                code: 200,\r\n                suggestions,\r\n            })\r\n        }\r\n        else {\r\n            res.send({ code: 0 })\r\n        }\r\n    }, res)\r\n})\r\n\r\n// 获取轮播图\r\nroms.get('/banner', async (_, res) => {\r\n    const sql: SelectSqlOption = {\r\n        select: ['roms.id as id', 'image', 'banner.title as title'],\r\n        from: 'banner join roms on banner.id=roms.id',\r\n    }\r\n    await dispatchResponse(async () => {\r\n        const banner = await db.allAsync(setSelectSql(sql))\r\n        banner.forEach(item => {\r\n            item.image = resolveURL(imgDir + item.image)\r\n        })\r\n        res.send({\r\n            code: 200,\r\n            banner,\r\n        })\r\n    }, res)\r\n})\r\n\r\nexport default roms\n","function setWhere(where: string[] | undefined): string {\r\n    return (where && where.length > 0) ? (\r\n        'WHERE '\r\n    + where.reduce((pre, cur) => {\r\n        return pre + ' AND ' + cur\r\n    })\r\n    ) : ''\r\n}\r\n\r\nexport const setSelectSql = (option: SelectSqlOption) => {\r\n    let sql = 'SELECT '\r\n    if (typeof option.select === 'string') {\r\n        sql += option.select + ' '\r\n    }\r\n    else {\r\n        option.select.forEach((item, i) => {\r\n            if (i === option.select.length - 1) {\r\n                sql += `${item} `\r\n            }\r\n            else {\r\n                sql += `${item}, `\r\n            }\r\n        })\r\n    }\r\n    sql += `FROM ${option.from} `\r\n    sql += setWhere(option.where)\r\n    if (option.order) {\r\n        sql += ` ORDER BY ${option.order.by} ${option.order.sort}`\r\n    }\r\n    if (option.limit) {\r\n        const count = Number(option.limit.count)\r\n        const page = Number(option.limit.page)\r\n        sql += ` LIMIT ${count * (page - 1)}, ${count}`\r\n    }\r\n    return sql\r\n}\n","import sqlite from 'sqlite3'\r\nimport type { Response } from 'express'\r\nimport { getDataBasePath } from '../server.config'\r\nimport logger from '../utils/logger'\r\n\r\nconst sqlite3 = sqlite.verbose()\r\ndeclare module 'sqlite3' {\r\n    interface Database {\r\n        allAsync: (sql: string, params?: (string | number)[]) => Promise<any[]>\r\n        runAsync: (sql: string, params?: (string | number)[]) => Promise<any[]>\r\n    }\r\n}\r\n\r\nconst db = new sqlite3.Database(getDataBasePath())\r\n\r\ndb.allAsync = (sql, parmas) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.all(sql, parmas, (err, rows) => {\r\n            if (err) {reject(err)}\r\n            resolve(rows)\r\n        })\r\n    })\r\n}\r\ndb.runAsync = (sql, params) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.run(sql, params, (err: Error, rows: unknown[]) => {\r\n            if (err) {reject(err)}\r\n            resolve(rows)\r\n        })\r\n    })\r\n}\r\n\r\nexport async function dispatchResponse(\r\n    target: Function,\r\n    res: Response,\r\n    message?: string,\r\n    err?: Function\r\n) {\r\n    message = message ?? '发生错误'\r\n    try {\r\n        await target()\r\n    }\r\n    catch (e) {\r\n        logger.error(`${e}`)\r\n        if (err) {\r\n            err()\r\n        }\r\n        res.send({\r\n            code: 500,\r\n            msg: message,\r\n        })\r\n    }\r\n}\r\n\r\nexport default db\n","import { join } from 'path'\r\nimport { getIpAddress } from './utils/query'\r\n\r\nconst dbPath = '../db/nes.sqlite3'\r\nconst romPath = '../roms'\r\nconst romDir = '/roms/'\r\nconst imgDir = '/roms/img/'\r\nconst hostIp = getIpAddress()\r\nconst getDataBasePath = () => join(__dirname, dbPath)\r\nconst getRomPath = () => join(__dirname, romPath)\r\n\r\nconst port = 8848\r\nlet baseURL = `http://localhost:${port}`\r\n\r\n// 开发模式下配置域名为本地ip\r\nif (process.env.NODE_ENV === 'development') {\r\n    baseURL = `http://${hostIp}:${port}`\r\n}\r\n\r\nexport {\r\n    romDir,\r\n    imgDir,\r\n    getDataBasePath,\r\n    getRomPath,\r\n    port,\r\n    baseURL,\r\n    hostIp,\r\n}\r\n","import { baseURL, romDir, imgDir } from '../server.config'\r\nimport os from 'os'\r\n\r\nexport function checkQuery<T>(query: T): query is Exclude<T, null | undefined | ''> {\r\n    if (typeof query === 'string') {\r\n        return query.trim() !== ''\r\n    }\r\n    return query !== void 0 && query !== null\r\n}\r\n\r\nexport function resolveURL(str: string) {\r\n    return baseURL + str\r\n}\r\n\r\nexport function resolveRomData(rom: RomInfo) {\r\n    rom.url = resolveURL(romDir + rom.url)\r\n    rom.cover = resolveURL(imgDir + rom.cover)\r\n    rom.image = resolveURL(imgDir + rom.image)\r\n    console.log(rom.url)\r\n}\r\n\r\nexport function getIpAddress() {\r\n    const ifaces = os.networkInterfaces()\r\n\r\n    for (const dev in ifaces) {\r\n        const iface = ifaces[dev]!\r\n\r\n        for (let i = 0; i < iface.length; i++) {\r\n            const { family, address, internal } = iface[i]\r\n\r\n            if (family === 'IPv4' && address !== '127.0.0.1' && !internal) {\r\n                return address\r\n            }\r\n        }\r\n    }\r\n}\r\n",null,"import { red, yellow, green } from 'kolorist'\r\n\r\nexport const info = function (str: string) {\r\n    console.log(green(str))\r\n}\r\n\r\nexport const warn = function (str: string) {\r\n    console.log(yellow(str))\r\n}\r\n\r\nexport const error = function (str: string) {\r\n    console.log(red(str))\r\n    process.exit(0)\r\n}\r\n\r\nexport const nestLine = function () {\r\n    console.log()\r\n}\r\n\r\nexport default {\r\n    info, warn, error,\r\n}\n","import type { Response } from 'express'\r\n\r\nexport function sendEmpty(res: Response, target: string) {\r\n    res.send({\r\n        code: 400,\r\n        message: `${target}内容不能为空`,\r\n    })\r\n}\n"],"mappings":"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","names":["import_express","os","sqlite","router","roms","express"]}